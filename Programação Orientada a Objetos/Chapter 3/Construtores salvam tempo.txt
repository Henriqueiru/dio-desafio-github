Parâmetros do Construtor
Os construtores também podem receber parâmetros, que são usados ​​para inicializar campos.

O exemplo a seguir adiciona um string modelNameparâmetro ao construtor. Dentro do construtor definimos modelcomo modelName( model=modelName). Quando chamamos o construtor, passamos um parâmetro para o construtor ( "Mustang"), que definirá o valor de modelcomo "Mustang":

Exemplo
class Car
{
  public string model;

  // Create a class constructor with a parameter
  public Car(string modelName)
  {
    model = modelName;
  }

  static void Main(string[] args)
  {
    Car Ford = new Car("Mustang");
    Console.WriteLine(Ford.model);
  }
}

// Outputs "Mustang"
 

Você pode ter quantos parâmetros quiser:

Exemplo
class Car
{
  public string model;
  public string color;
  public int year;

  // Create a class constructor with multiple parameters
  public Car(string modelName, string modelColor, int modelYear)
  {
    model = modelName;
    color = modelColor;
    year = modelYear;
  }

  static void Main(string[] args)
  {
    Car Ford = new Car("Mustang", "Red", 1969);
    Console.WriteLine(Ford.color + " " + Ford.year + " " + Ford.model);
  }
}


// Outputs Red 1969 Mustang
 

Dica: Assim como outros métodos, os construtores podem ser sobrecarregados usando diferentes números de parâmetros.

Construtores economizam tempo
Ao considerar o exemplo do capítulo anterior, você notará que os construtores são muito úteis, pois ajudam a reduzir a quantidade de código:

Sem construtor:

prog.cs
class Program
{
  static void Main(string[] args)
  {
    Car Ford = new Car();
    Ford.model = "Mustang";
    Ford.color = "red";
    Ford.year = 1969;

    Car Opel = new Car();
    Opel.model = "Astra";
    Opel.color = "white";
    Opel.year = 2005;

    Console.WriteLine(Ford.model);
    Console.WriteLine(Opel.model);
  }
}

Com construtor:

prog.cs
class Program
{
  static void Main(string[] args)
  {
    Car Ford = new Car("Mustang", "Red", 1969);
    Car Opel = new Car("Astra", "White", 2005);

    Console.WriteLine(Ford.model);
    Console.WriteLine(Opel.model);
  }
}