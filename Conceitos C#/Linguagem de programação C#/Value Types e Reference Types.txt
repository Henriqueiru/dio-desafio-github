A memoria é dividida em duas partes, Heap e Stack, uma armazena os dados e a outra referencia para os dados, como endereço
Heap armazena os dados
Stack armazena as referencias para os dados

Qualquer tipo no .NET é tratado como
	Tipo de Referencia (Reference Type)
	Tipo de Valor (Value Type)
Tipos de valor armazenam dados
São armazenados em um local da memoria chamada Stack
Quando armazena um valor, a memoria é alocada
Este espaço armazena o dado criado
Nossa variavel acessa este dado diretamente
Se assimilarmos uma variavel do tipo de valor a outra do tipo valor por exemplo
	O valor será COPIADO
	Ambas serão independentes
Built-in, Structs, Enums são sempre do tipo valor, sempre uma informação que a gente tem e nao uma referencia
Garbage Collector não acessa o Stack

Exemplos Value Types

int x = 25;
int y = x; // Y é uma copia de X
Console.WriteLine(x); // 25
Console.WriteLine(y); // 25
x = 32; // Somente X foi alterado
Console.WriteLine(x); // 32
Console.WriteLine(y); // 25


Ja as reference types
Armazenam o endereço do objeto que contem os dados
Nao armazena os dados em si
São armazenados em um local da memoria chamado Heap
Ao assimilar uma variavel
	Criará uma referencia
	Aponta para a mesma informação
	Não são independentes
Quando não mais utilizados são marcados para exclusão
Garbage Collector passa removendo todos eles
Classes, Objects, Arrays...

Exemplos:

var arr = new string[2];
arr[0] = "Item 1";
var arr2 = arr; // Não cria uma cópia

Console.WriteLine(arr[0]);
Console.WriteLine(arr2[0]);

// Altera as duas listas
arr[0] = "Item Alterado";
Console.WriteLine(arr[0]);
Console.WriteLine(arr2[0]);